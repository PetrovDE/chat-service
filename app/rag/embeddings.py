# app/rag/embeddings.py
import logging
from typing import List
from langchain_ollama import OllamaEmbeddings
from app.rag.config import rag_config

logger = logging.getLogger(__name__)


class OllamaEmbeddingsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (embeddings) —á–µ—Ä–µ–∑ Ollama
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Llama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings
    """

    def __init__(
            self,
            model: str = None,
            base_url: str = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ embeddings

        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Ollama (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
            base_url: URL Ollama —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        self.model = model or rag_config.embeddings_model
        self.base_url = base_url or rag_config.embeddings_base_url

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama Embeddings
        try:
            self.embeddings = OllamaEmbeddings(
                model=self.model,
                base_url=self.base_url
            )
            logger.info(f"‚úÖ OllamaEmbeddings initialized: model={self.model}, base_url={self.base_url}")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize OllamaEmbeddings: {e}")
            raise

        self._embedding_cache = {} if rag_config.enable_cache else None

    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        """
        –°–æ–∑–¥–∞—Ç—å embeddings –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –≤–µ–∫—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –≤–µ–∫—Ç–æ—Ä - —Å–ø–∏—Å–æ–∫ float)
        """
        try:
            if not texts:
                logger.warning("‚ö†Ô∏è Empty text list provided for embedding")
                return []

            logger.info(f"üîÑ Creating embeddings for {len(texts)} documents...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if self._embedding_cache is not None:
                cached_results = []
                uncached_texts = []
                uncached_indices = []

                for i, text in enumerate(texts):
                    cache_key = hash(text)
                    if cache_key in self._embedding_cache:
                        cached_results.append((i, self._embedding_cache[cache_key]))
                    else:
                        uncached_texts.append(text)
                        uncached_indices.append(i)

                if cached_results:
                    logger.info(f"üì¶ Found {len(cached_results)} embeddings in cache")

                # –°–æ–∑–¥–∞—Ç—å embeddings —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
                if uncached_texts:
                    new_embeddings = self.embeddings.embed_documents(uncached_texts)

                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à
                    for text, embedding in zip(uncached_texts, new_embeddings):
                        self._embedding_cache[hash(text)] = embedding

                    # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    all_embeddings = [None] * len(texts)
                    for i, embedding in cached_results:
                        all_embeddings[i] = embedding
                    for i, embedding in zip(uncached_indices, new_embeddings):
                        all_embeddings[i] = embedding

                    return all_embeddings
                else:
                    # –í—Å–µ –∏–∑ –∫—ç—à–∞
                    return [emb for _, emb in sorted(cached_results)]

            # –ë–µ–∑ –∫—ç—à–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º embeddings
            embeddings = self.embeddings.embed_documents(texts)
            logger.info(f"‚úÖ Created {len(embeddings)} embeddings successfully")
            return embeddings

        except Exception as e:
            logger.error(f"‚ùå Error creating embeddings: {e}")
            raise

    def embed_query(self, text: str) -> List[float]:
        """
        –°–æ–∑–¥–∞—Ç—å embedding –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            –í–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ (—Å–ø–∏—Å–æ–∫ float)
        """
        try:
            if not text or not text.strip():
                logger.warning("‚ö†Ô∏è Empty query text provided")
                return []

            logger.debug(f"üîç Creating embedding for query: {text[:50]}...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if self._embedding_cache is not None:
                cache_key = hash(text)
                if cache_key in self._embedding_cache:
                    logger.debug("üì¶ Query embedding found in cache")
                    return self._embedding_cache[cache_key]

            # –°–æ–∑–¥–∞—Ç—å embedding
            embedding = self.embeddings.embed_query(text)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à
            if self._embedding_cache is not None:
                self._embedding_cache[hash(text)] = embedding

            logger.debug(f"‚úÖ Query embedding created (dimension: {len(embedding)})")
            return embedding

        except Exception as e:
            logger.error(f"‚ùå Error creating query embedding: {e}")
            raise

    def get_embedding_dimension(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏

        Returns:
            –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding –≤–µ–∫—Ç–æ—Ä–∞
        """
        try:
            # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π embedding –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
            test_embedding = self.embed_query("test")
            dimension = len(test_embedding)
            logger.info(f"üìè Embedding dimension: {dimension}")
            return dimension
        except Exception as e:
            logger.error(f"‚ùå Error getting embedding dimension: {e}")
            # –î–ª—è llama3.1:8b —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –æ–±—ã—á–Ω–æ 4096
            return 4096

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à embeddings"""
        if self._embedding_cache is not None:
            cache_size = len(self._embedding_cache)
            self._embedding_cache.clear()
            logger.info(f"üóëÔ∏è Cleared embedding cache ({cache_size} items)")

    def get_cache_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞"""
        if self._embedding_cache is not None:
            return len(self._embedding_cache)
        return 0

    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π embedding
            self.embed_query("test")
            logger.info("‚úÖ Ollama embeddings service is available")
            return True
        except Exception as e:
            logger.error(f"‚ùå Ollama embeddings service unavailable: {e}")
            return False